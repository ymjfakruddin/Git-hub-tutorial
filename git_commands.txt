Github command -revison
Git config --global username “”//git config --global user.name"user name"
                                git config --global user.email"email ID"


//
Git config --global  email””
Git init
Git status
Git add
Git add –all
Git commit -m
Git restore 
Git branch name
Git checkout branch name
Git checkout -b branch name 
Git remote set-url origin
Git remote target
Git remote -a
Git remote -v
git pull
git push origin branch name 
cd,mv,rm
$ git remote add origin https://github.com/ymjfakruddin/Learning_git.git
mkdir
git help command
git help –all
git commad name  -help
Hello World
git pull origin master
git pull
git push origin master
git log
git log --oneline
Date : 11/19/2024
git remote add origin 
git init
And HTTPS link will add the remote repository to connect with local repository with a secure network and this will copy from Github & paste in the git bash here with command git remote add origin and paste the link .
Date :11/20/2024
We have ssh  it means used for unsecured network this protocol is used in git
git config --global user.email " "
git config --global user.name " "
git init 
git status 
git add -all
git commit -m
git restore 
git remote add origin
git remote set_URL 
git checkout
git branch
git branch name
git push origin branch name
git pull 
git log
git log -oneline
git revert 
git fetch origin git.txt

git unrelated histories
occurs when you attempt to merge two Git repositories that have completely separate commit histories. This typically happens if the local repository and the remote repository were initialized independently (e.g., both were created with git init but were not connected initially).

How to Fix This
You can force Git to merge the unrelated histories using the --allow-unrelated-histories flag. Here's how to do it:

bash
Copy code
git pull origin master --allow-unrelated-histories
This will combine the two histories, resolving the issue. After running this command, Git will attempt to merge the histories, and you may need to resolve any conflicts if they exist..

git push origin master force 
git push prigin   master --allow-unrelated-histories
date 11/21/2024
git config -global user.email""
git config =global user.name
git init
git status
git add --all
git commit -m" "
git branch
git branch branch name
git checkout branch name
git checkout -b newbranch name
git remote add origin "link of https"
git remote set URL
git push origin branch name
git clone link
git pull origin branch name
git log 
git fetch origin 
git log -oneline
git pull
git push origin master force 
it will override the files in GitHub
git pull origin master -allow-unrelated-histories  //it is used to merge  unrelated histories becoz same repostiories working by two people
date:11/22/2024
git config -global user.email""
git config -global user.name""
git init
git status 
git add --all
git commit -m"message"
git branch /name
git checkout /branch name 
git checkout -b
git remote add origin 
git remote  set-url
git remote -a
git remote -v 
git fetech origin 
git log
git log -oneline
git fetch origin 
git push origin branch name
git push 
git clone s
git pull 
git pull origin master
git merge branch name
git pull origin master -allow-unrelated-histories
git push origin master force
ls 
mkdir
cd
rmdir
touch 
grep 
date :11/24/2024
git comfig --global user.name
git config --global user.email
git init
git status 
git add . or add file name or add --all
git commit -m
git remote add origin 
git remote  set -url 
git remote -v
git remote -a
git remote
git push -u origin branch name
git push 
git clone
git pull origin master
git pull origin master allow-unrelated -histories
git push origin master --force
git fetch origin 
git push -u origin master
-u set upstream
git pull 
git branch 
git checkout 
git switch 
git checkout -bgit
git switch origin master
git log
git log --oneline
git DIFF
head will point current branch which we are working currently
git merge
to delete branch in git  
git branch -d branch name

undo commands
git reset  --head
git restore 
git revert 
it has http and ssh links of it 


Now I am added
date :11/27/2024

git config --global user.email and user.name
git init
git status
git add . or --all
git commit -m"message"
git remote add origin 
git remote set -url
git remote -v
git remote remove 
git push origin master
git push   -u origin master
git push origin master --force
git pull
git pull origin master -allow--unrelated-histories
git fecth origin
git log 
git log -oneline
git branch 
git switch branch name
git checkout -b
git merge 
git branch -d delete 
git diff
git clone
git reset
git revert
git restore
ls
mkdir,rmdir
touch
cd cd..
grep
1. Prefix Sum
2. Two Pointers
3. Sliding Window
4. Fast & Slow Pointers
5. LinkedList In-place Reversal
6. Monotonic Stack
7. Top ‘K’ Elements
8. Overlapping Intervals
9. Binary Search Variants
10. Binary Tree Traversal
11. Depth-First Search (DFS)
12. Breadth-First Search (BFS)
13. Matrix Traversal
14. Backtracking
15. Dynamic Programming Patterns


Date :11/29/2024
git config --global user.name""
git config --global user.email""
git init
git status
git add
git add. 
git add --all
git commit -m" "
git remote -v
git remote  add origin "URL-HTTPS" 
git remote  set -url origin 
git push origin master --force
git push origin master
git push 
git branch 
git branch branchname
git checkout 
git checkout -u
git switch
git branch -d or -D "to delete a branch"
git pull origin master
git pull
git pull origin master allow-unrelated--histories "this is used when  two local repository merges into the GitHub"
git clone 
git merge
git log
git log --oneline
git revert
git restore 
git reset
git fetch origin 
over the https mostly now using the ssh  for unsecured networks connections
<<<<<<< HEAD
now  I need to learn CI/CD pipeline of git and GitHub.
git remote remove 

=======
now  I need to learn CI/CD pipeline
CI means continous Integration and CD means Continous deployment or continous Delivery (two names becoz it depends)
CI mostly using by developer will develop the code if error rectify solve the error and run the test cased and integrate with git and other developes also will be know who written the code
CI&CD tools are JEnkins etc,, after CI will do CD most probably this Job belongs to the Devops becoz after CI goes into Staging Area.
CI & CD tool mostly developer part is the CI(Continous integeration it means write code ,Test it,if errors ,again write code ,Tests if everthing is good "push into branch after checking it will merge to the master branch"
and it will go into the CD pipe line process in CD(Continous Develiever or deployment )here code go into staging areas and User Acceptance Testing or some other after wards move into the Production server\


now  I need to learn CI/CD pipeline
CI means continous Integration and CD means Continous deployment or continous Delivery (two names becoz it depends)
CI mostly using by developer will develop the code if error rectify solve the error and run the test cased and integrate with git and other developes also will be know who written the code
CI&CD tools are JEnkins etc,, after CI will do CD most probably this Job belongs to the Devops becoz after CI goes into Staging Area.
CI & CD tool mostly developer part is the CI(Continous integeration it means write code ,Test it,if errors ,again write code ,Tests if everthing is good "push into branch after checking it will merge to the master branch"
and it will go into the CD pipe line process in CD(Continous Develiever or deployment )here code go into staging areas and User Acceptance Testing or some other after wards move into the Production server
<<<<<<< HEAD
>>>>>>> 0a0fd944a9ef8f16591e7fb8aeae3387e9e2ac8c
=======
bash: MERGING: command not found
error: Pulling is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

>>>>>>> 84ba2b7375786ed3ea9d8dd3c54a2b905ffe9c6a






 



