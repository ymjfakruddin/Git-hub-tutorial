Github command -revison
Git config --global username “”//git config --global user.name"user name"
                                git config --global user.email"email ID"


//
Git config --global  email””
Git init
Git status
Git add
Git add –all
Git commit -m
Git restore 
Git branch namegit g
Git checkout branch name
Git checkout -b branch name 
Git remote set-url origin
Git remote target
Git remote -a
Git remote -v
git pull
git push origin branch name 
cd,mv,rm
$ git remote add origin https://github.com/ymjfakruddin/Learning_git.git
mkdir
git help command
git help –all
git commad name  -help
Hello World
git pull origin master
git pull
git push origin master
git log
git log --oneline
Date : 11/19/2024
git remote add origin 
git init
And HTTPS link will add the remote repository to connect with local repository with a secure network and this will copy from Github & paste in the git bash here with command git remote add origin and paste the link .
Date :11/20/2024
We have ssh  it means used for unsecured network this protocol is used in git
git config --global user.email " "
git config --global user.name " "
git init 
git status 
git add -all
git commit -m
git restore 
git remote add origin
git remote set_URL 
git checkout
git branch
git branch name
git push origin branch name
git pull 
git log
git log -oneline
git revert 
git fetch origin git.txt

git unrelated histories
occurs when you attempt to merge two Git repositories that have completely separate commit histories. This typically happens if the local repository and the remote repository were initialized independently (e.g., both were created with git init but were not connected initially).

How to Fix This
You can force Git to merge the unrelated histories using the --allow-unrelated-histories flag. Here's how to do it:

bash
Copy code
git pull origin master --allow-unrelated-histories
This will combine the two histories, resolving the issue. After running this command, Git will attempt to merge the histories, and you may need to resolve any conflicts if they exist..

git push origin master force 
git push prigin   master --allow-unrelated-histories
date 11/21/2024
git config -global user.email""
git config =global user.name
git init
git status
git add --all
git commit -m" "
git branch
git branch branch name
git checkout branch name
git checkout -b newbranch name
git remote add origin "link of https"
git remote set URL
git push origin branch name
git clone link
git pull origin branch name
git log 
git fetch origin 
git log -oneline
git pull
git push origin master force 
it will override the files in GitHub
git pull origin master -allow-unrelated-histories  //it is used to merge  unrelated histories becoz same repostiories working by two people
date:11/22/2024
git config -global user.email""
git config -global user.name""
git init
git status 
git add --all
git commit -m"message"
git branch /name
git checkout /branch name 
git checkout -b
git remote add origin 
git remote  set-url
git remote -a
git remote -v 
git fetech origin 
git log
git log -oneline
git fetch origin 
git push origin branch name
git push 
git clone s
git pull 
git pull origin master
git merge branch name
git pull origin master -allow-unrelated-histories
git push origin master force
ls 
mkdir
cd
rmdir
touch 
grep 
date :11/24/2024
git comfig --global user.name
git config --global user.email
git init
git status 
git add . or add file name or add --all
git commit -m
git remote add origin 
git remote  set -url 
git remote -v
git remote -a
git remote
git push -u origin branch name
git push 
git clone
git pull origin master
git pull origin master allow-unrelated -histories
git push origin master --force
git fetch origin 
git push -u origin master
-u set upstream
git pull 
git branch 
git checkout 
git switch 
git checkout -bgit
git switch origin master
git log
git log --oneline
git DIFF
head will point current branch which we are working currently
git merge
to delete branch in git  
git branch -d branch name

undo commands
git reset  --head
git restore 
git revert 
it has http and ssh links of it 


Now I am added
date :11/27/2024

git config --global user.email and user.name
git init
git status
git add . or --all
git commit -m"message"
git remote add origin 
git remote set -url
git remote -v
git remote remove 
git push origin master
git push   -u origin master
git push origin master --force
git pull
git pull origin master -allow--unrelated-histories
git fecth origin
git log 
git log -oneline
git branch 
git switch branch name
git checkout -b
git merge 
git branch -d delete 
git diff
git clone
git reset
git revert
git restore
ls
mkdir,rmdir
touch
cd cd..
grep
1. Prefix Sum
2. Two Pointers
3. Sliding Window
4. Fast & Slow Pointers
5. LinkedList In-place Reversal
6. Monotonic Stack
7. Top ‘K’ Elements
8. Overlapping Intervals
9. Binary Search Variants
10. Binary Tree Traversal
11. Depth-First Search (DFS)
12. Breadth-First Search (BFS)
13. Matrix Traversal
14. Backtracking
15. Dynamic Programming Patterns


Date :11/29/2024
git config --global user.name""
git config --global user.email""
git init
git status
git add
git add. 
git add --all
git commit -m" "
git remote -v
git remote  add origin "URL-HTTPS" 
git remote  set -url origin 
git push origin master --force
git push origin master
git push 
git branch 
git branch branchname
git checkout 
git checkout -u
git switch
git branch -d or -D "to delete a branch"
git pull origin master
git pull
git pull origin master allow-unrelated--histories "this is used when  two local repository merges into the GitHub"
git clone 
git merge
git log
git log --oneline
git revert
git restore 
git reset
git fetch origin 
over the https mostly now using the ssh  for unsecured networks connections
now  I need to learn CI/CD pipeline of git and GitHub.
git remote remove 

CI means continous Integration and CD means Continous deployment or continous Delivery (two names becoz it depends)
CI mostly using by developer will develop the code if error rectify solve the error and run the test cased and integrate with git and other developes also will be know who written the code
CI&CD tools are JEnkins etc,, after CI will do CD most probably this Job belongs to the Devops becoz after CI goes into Staging Area.
CI & CD tool mostly developer part is the CI(Continous integeration it means write code ,Test it,if errors ,again write code ,Tests if everthing is good "push into branch after checking it will merge to the master branch"
and it will go into the CD pipe line process in CD(Continous Develiever or deployment )here code go into staging areas and User Acceptance Testing or some other after wards move into the Production server\
date :12/1/2024
git config --global user.name"username"
git config --global user.email"Email Id"
git status
git add 
git add . 0r --all
git commit -m
git commit
git remote add origin "https link"
git remote set -URL origin "HTTPS link"
git remote -v
git remote remove
git push -u origin master
git push 
git push origin master --force
git clone
git pull origin master
git pull 
git pull origin master -allow-unrelated-histories
pull is comibination of fetch and merge 
git fetch origin 
git log
git log --oneline
git branch 
git branch -d //to delete branch
git checkout -b
git checkout 
git switch
git merge 
git revert
git rebase
git restore 
git reset

CI and CD pipline also can do using GitHub becoz continuous integration done by developers pushing the code into GitHub branch and continuous development it is for deveops means done UAT & other testing also done after wards move into the Production server

Date:02/12/2024
git --version
git config --global user.name
git config --global user.email
git init
git status
git add 
git add . or --all
git commit -m
git remote -v
git remote add origin
git branch 
git branch -d 
git push origin master
git push origin master --force
git push 
git clone
git pull 
git pull origin branch name // -allow-urelated--histories 
pull is a combination of merge and fetch
git fetch origin 
git checkout
git switch 
git checkout -b
git merge
git revert
git reset
git rebase
git restore
git log 
git log --oneline
git clone
ssh link used for the unsecured network 
ci and cd pipeline continuous integration and continuous deployement or delievery 
ls 
cd
mkdir
rmdir
touch
grep 
cat
rm
pwd
echo
pip install

LinkedIn Git commands

𝟭. 𝗴𝗶𝘁 𝗱𝗶𝗳𝗳: Show file differences not yet staged.
𝟮. 𝗴𝗶𝘁 𝗰𝗼𝗺𝗺𝗶𝘁 -𝗮 -𝗺 "𝗰𝗼𝗺𝗺𝗶𝘁 𝗺𝗲𝘀𝘀𝗮𝗴𝗲": Commit all tracked changes with a message.
𝟯. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘁𝘂𝘀: Show the state of your working directory.
𝟰. 𝗴𝗶𝘁 𝗮𝗱𝗱 𝗳𝗶𝗹𝗲_𝗽𝗮𝘁𝗵:Add file(s) to the staging area.
𝟱. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗰𝗸𝗼𝘂𝘁 -𝗯 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Create and switch to a new branch.
𝟲. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗰𝗸𝗼𝘂𝘁 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Switch to an existing branch.
𝟳. 𝗴𝗶𝘁 𝗰𝗼𝗺𝗺𝗶𝘁 --𝗮𝗺𝗲𝗻𝗱:Modify the last commit.
𝟴. 𝗴𝗶𝘁 𝗽𝘂𝘀𝗵 𝗼𝗿𝗶𝗴𝗶𝗻 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Push a branch to a remote.
𝟵. 𝗴𝗶𝘁 𝗽𝘂𝗹𝗹: Fetch and merge remote changes.
𝟭𝟬. 𝗴𝗶𝘁 𝗿𝗲𝗯𝗮𝘀𝗲 -𝗶: Rebase interactively, rewrite commit history.
𝟭𝟭. 𝗴𝗶𝘁 𝗰𝗹𝗼𝗻𝗲: Create a local copy of a remote repo.
𝟭𝟮. 𝗴𝗶𝘁 𝗺𝗲𝗿𝗴𝗲: Merge branches together.
𝟭𝟯. 𝗴𝗶𝘁 𝗹𝗼𝗴 --𝘀𝘁𝗮𝘁: Show commit logs with stats.
𝟭𝟰. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘀𝗵: Stash changes for later.
𝟭𝟱. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘀𝗵 𝗽𝗼𝗽: Apply and remove stashed changes.
𝟭𝟲. 𝗴𝗶𝘁 𝘀𝗵𝗼𝘄 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Show details about a commit.
𝟭𝟳. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁 𝗛𝗘𝗔𝗗~𝟭: Undo the last commit, preserving changes locally.
𝟭𝟴. 𝗴𝗶𝘁 𝗳𝗼𝗿𝗺𝗮𝘁-𝗽𝗮𝘁𝗰𝗵 -𝟭 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Create a patch file for a specific commit.
𝟭𝟵. 𝗴𝗶𝘁 𝗮𝗽𝗽𝗹𝘆 𝗽𝗮𝘁𝗰𝗵_𝗳𝗶𝗹𝗲_𝗻𝗮𝗺𝗲: Apply changes from a patch file.
𝟮𝟬. 𝗴𝗶𝘁 𝗯𝗿𝗮𝗻𝗰𝗵 -𝗗 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Delete a branch forcefully.
𝟮𝟭. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁: Undo commits by moving branch reference.
𝟮𝟮. 𝗴𝗶𝘁 𝗿𝗲𝘃𝗲𝗿𝘁: Undo commits by creating a new commit.
𝟮𝟯. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗿𝗿𝘆-𝗽𝗶𝗰𝗸 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Apply changes from a specific commit.
𝟮𝟰. 𝗴𝗶𝘁 𝗯𝗿𝗮𝗻𝗰𝗵: Lists branches.
𝟮𝟱. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁 --𝗵𝗮𝗿𝗱: Resets everything to a previous commit, erasing all uncommitted changes.


Date :12-3-2024
git config --global user.name
git config --global user.email
git init
git status
git add 
git add . or --all
git commit -m
git remote 
git remote -v
git remote add origin "https or ssh link"
git remote set -url origin
git push origin branch main
git push 
git clone
git pull origin master
git push origin branch name --force
git pull // pull is combination of merge and fetch
git pull origin branch -allow-unrelated-histories
git branch -A
git branch -D //to delete branch
git merge 
git reset --hard
git restore file name
git revert
git stash
git log
git log --oneline
git fetch origin 
git rebase //re write the commit history 
git checkout
git switch 
git checkout -b
git diff
ls 
mkdir,rmdir,cat, touch, pwd, echo, grep,rm,cp,clear,cal,cd



Top Tricky  JAVA Questions 

1. Why Java is not 100% Object-oriented
2. Why pointers are not used in Java
3. What is JIT compiler in Java
4. Why String is immutable in java
5. What is a marker interface

6. Can you override a private or static method in Java
7. Does “finally” always execute in Java
8. How Can You Make a Class Immutable
9. What is singleton class in Java and how can we make a class singleton?
10. How to break a Singleton pattern --not completed

11. Does Java support multiple inheritances
12. Can you access a non-static variable in the static context
13. is it possible to load a class by two ClassLoader
14. Can you explain how “Inheritance” and “Composition” are different
15. What is the best candidate for the HashMap Key

16. Can we use a default constructor of a class even if an explicit constructor is defined
17. If two threads have same priority which thread will be executed first
18. Can we serialize static variables in java
19. What is a deadlock in Java, and how can you create one programmatically
20. Will the ‘finally’ block execute if you put the return statement or System. exit () on the ‘try‘ or ‘catch‘ block?




Date :12/4/2024

git config --global user.name & user.email
git --version
git init
git status
git add or add . or add -all
git commit -m "message"
git remote -v
git remote 
git remote add orgin "https link"
git remote set -url "https or ssh"
git push -u origin  branch name
git push origin branch name --force
git branch 
git branch -d to delete branch
git branch -a
git switch branch name
git checkout branch name
git checkout -b
git  merge 
git clone
git pull origin branch name // pull is a comibination of the fetch and origin 
git pull origin branch  -allow--unrelated-histories
git pull
git fetch origin
git rebase 
git restore 
git reset --hard
git revert
git diff
git  
𝟮𝟯. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗿𝗿𝘆-𝗽𝗶𝗰𝗸 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Apply changes from a specific commit.
Linux commands -ls,mkdir,rmdir,touch,cp,rm,cat,grep,pwd,echo,clear,cal,mv,pip,cd.*whoami

Date :12/5/2024
git --version
git config --global user.name&email
git init
git status
git add or add. or --all
git commit -m
git remote -a
git remote
git remote -v
git remote add origin
git remote set -url ""
git remote add origin 
git push origin master
git push origin ,aster --force
git push 
git branch
git branch -n or -a rename
git branch -d
git switch
git checkout
git checkout-b
git clone
git pull origin master
git pull origin master -allow-unrelated-histories
git pull //comibination of fetch and merege
git merge 
git fectch origin 
git reset 
git reset --hard
git revert 
git restore
git rebase
git stash
git log
git log -oneline
git fetch --head
𝟭𝟯. 𝗴𝗶𝘁 𝗹𝗼𝗴 --𝘀𝘁𝗮𝘁: Show commit logs with stats.

Linux commands
ls
grep
cd mkdir rmdir cp cat echo pwd rm touch clear cal whoami 
mv pip install locate man 










//This program says that while we are using the Integer - Type Casting  -128 == 127 it will be true after this range i will not be equal it is false only  becoz of Memory space 
class Check 
{
	public static void main(String[] args) 
	{
		//System.out.println("Hello World!");

      Integer a = 10;
	  Integer b = 10;
	   if(a == b)
		{
		   System.out.println("True");
		}
		else
		{
			System.out.println("False");
		}
	Integer c = 287;
	Integer d = 287;
		if(c == d)
		{
			System.out.println("True");
		}
		else
		{
			System.out.println("False");
		}
     }
}




https://www.youtube.com/watch?v=oAja8-Ulz6o

Date :12/6/2024
git --version
git config --global user.name & user.email
git init
git status
git add or add . or add --all
git commit -m
git cherry-pick commit id
git remote -v ,-a
git remote set -URL origin 
git remote add origin
git remote 
git push origin master
git push
git push origin master --force
git clone
git pull 
git pull origin master
git pull origin master  -allow--unrelated-histories
git stash
git diff
git revert
git restore
git rebase
git reset --hard
git reset
git merge
git branch 
git branch -n 
git branch -d
git checkout
git checkout -b
git switch
git log
git log -oneline
git log stat
git fetch origin
git --version

Linux commands
ls, cd,grep,mv,rm,mkdir,rmdir,cp,touch,locate ,clear,cal,cp,cat,pip,whoami,date,ip,



𝟏. 𝐃𝐒𝐀 𝐁𝐚𝐬𝐢𝐜𝐬
- Time Complexity (Big-O, Big-Theta, Big-Omega)
- Space Complexity
- Recursion (Base Case, Recursive Relations)
- Divide and Conquer
- Iterative vs Recursive Approaches

𝟐. 𝐀𝐫𝐫𝐚𝐲𝐬
- Basics: Declaration, Initialization, Traversal
- Operations: Insertion, Deletion, Searching
- Techniques: Prefix Sum, Sliding Window, Two-Pointer
- Problems: Kadane's Algorithm, Subarray Sums

𝟑. 𝐒𝐭𝐫𝐢𝐧𝐠𝐬
- Basics: Character Arrays, String Manipulations
- Algorithms: KMP, Rabin-Karp, Z-Algorithm
- Problems: Palindromes, Anagrams, Pattern Matching
- Data Structures: Trie (Prefix Tree)

𝟒. 𝐋𝐢𝐧𝐤𝐞𝐝 𝐋𝐢𝐬𝐭𝐬
- Types: Singly, Doubly, Circular
- Operations: Creation, Insertion, Deletion, Traversal
- Problems: Reversing, Detecting Loops (Floyd’s Cycle Detection), Merging

𝟓. 𝐒𝐭𝐚𝐜𝐤𝐬 𝐚𝐧𝐝 𝐐𝐮𝐞𝐮𝐞𝐬
- Stack Operations: Push, Pop, Peek
- Problems: Balanced Parentheses, Next Greater Element
- Queue Variants: Circular Queue, Deque
- Applications: BFS, Sliding Window Maximum

𝟔. 𝐓𝐫𝐞𝐞𝐬
- Basics: Binary Tree, Binary Search Tree (BST)
- Traversals: Inorder, Preorder, Postorder, Level Order
- Advanced Trees: AVL, Red-Black, Segment Trees
- Problems: Lowest Common Ancestor, Diameter, Path Sums

𝟕. 𝐆𝐫𝐚𝐩𝐡𝐬
- Representations: Adjacency Matrix, Adjacency List
- Traversals: BFS, DFS
- Algorithms: Dijkstra’s, Bellman-Ford, Kruskal’s, Prim’s
- Problems: Cycle Detection, Connected Components, Bipartite Graphs

𝟖. 𝐇𝐚𝐬𝐡𝐢𝐧𝐠
- Hash Tables and Hash Functions
- Collision Handling: Chaining, Open Addressing
- Problems: Frequency Counts, Subarray Sums, Duplicates

𝟗. 𝐃𝐲𝐧𝐚𝐦𝐢𝐜 𝐏𝐫𝐨𝐠𝐫𝐚𝐦𝐦𝐢𝐧𝐠 (𝐃𝐏)
- Basics: Overlapping Subproblems, Optimal Substructure
- Classic Problems: Fibonacci, Knapsack, Climbing Stairs
- Advanced: Matrix Chain Multiplication, LIS, DP on Trees

𝟏𝟎. 𝐆𝐫𝐞𝐞𝐝𝐲 𝐀𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦𝐬
- Basics: Greedy Approach for Optimization
- Problems: Activity Selection, Fractional Knapsack, Huffman Encoding

𝟏𝟏. 𝐁𝐚𝐜𝐤𝐭𝐫𝐚𝐜𝐤𝐢𝐧𝐠
- Basics: Exploring All Possibilities
- Problems: N-Queens, Sudoku Solver, Permutations

𝟏𝟐. 𝐒𝐨𝐫𝐭𝐢𝐧𝐠 𝐚𝐧𝐝 𝐒𝐞𝐚𝐫𝐜𝐡𝐢𝐧𝐠
- Sorting Algorithms: Bubble, Merge, Quick, Heap Sort
- Searching Techniques: Binary Search, Lower/Upper Bounds
- Problems: K-th Smallest/Largest Element

𝟏𝟑. 𝐀𝐝𝐯𝐚𝐧𝐜𝐞𝐝 𝐓𝐨𝐩𝐢𝐜𝐬 
- Segment Trees and Fenwick Trees
- Disjoint Set Union (DSU)
- Graph Algorithms: Topological Sorting, Floyd-Warshall, Tarjan’s Algorithm
- Tries and Suffix Arrays

𝟏𝟒. 𝐏𝐫𝐚𝐜𝐭𝐢𝐜𝐞 𝐚𝐧𝐝 𝐎𝐩𝐭𝐢𝐦𝐢𝐳𝐚𝐭𝐢𝐨𝐧
- Problem Solving on LeetCode, HackerRank, Codeforces
- Focus on Constraints and Edge Cases
- Competitive Programming Contests for Speed and Skills





Date: 12/7/2024

git --version
git config --global user.name and user.email
git init
git status
git add or add. or add --all
git commit -m
git remote
git remote -v
git remote -a
git remote add origin
git remote set -url
git push 
git push origin master
git push origin master --force
git clone
git pull 
git fetch origin 
git pull origin  branch name
git pull origin master -allow -unrelated--histories
git branch
git branch -n
git branch -d
git checkout
git checkout -b
git diff
git switch
git rebase
git revert
git reset  --hard
git restore
git reset
git cherry-pick commit id //this git command is used for the to add the commit to another without branching the another branch
git log 
git log -oneline
git log stat
git merge
git show commit_id
Linux commands:ls,cd,cp,mv,rm,touch,cat,dir,mkdir,rmdir,pwd,clear,date,locate,cal,grep,vi,pip,whoami,ip,echo,*uname,*sort
Date: 12/8/2024
git --version
git config -global user.name & user.email
git init
git status
git add or add . or add -all
git commit -m 
git cherry -pick commit id //it is used to commit for another branch without commit
git remote
git remote -v
git remote -n 
git remote set -url
git remote  add origin
git clone
git push origin master
git push origin master --force
git push origin master
git pull 
git pull origin master
git pull -allow-unrelated-histories
git log
git log -oneline
git log stat
git reset
git reset --hard
git rvert
git rebase
git fetch origin
git merge
git branch 
git branch -a
git checkout 
git checkout -b
git switch
Linux commands 
ls,cd,rm,touch,cp,pwd,rmdir,mkdir,pip,echo,whoami,grep,locate,clear,date,cal,ip


Spring Boot Roadmap

PHASE 1 - Basics

• Creating a spring boot project using spring initializr
• Maven and gradle build tools
• Annotations
• Profiles and environment-specific configurations
• @getmapping, @postmapping, @putmapping, @deletemapping
• Handling path variables and request parameters
• Setting up database connection (h2, mysql, postgresql)
• Using jparepository and crudrepository
• Introduction to spring boot devtools
• Enabling hot reloading
• Spring batch, scheduling and cron expressions


PHASE 2-Intermediate

• Using @controlleradvice and @exceptionhandler
• Custom error responses and exception classes
• Global exception handling
• Basic authentication
• Configuring security for apis
• Implementing jwt (json web tokens) for stateless authentication
• Introduction to hateoas
• Versioning rest apis (uri, parameter, headers)
• Unit testing with junit and mockito
• Writing integration tests with spring boot test
• Testing restful services with mockmvc
• Exploring actuator endpoints
• Creating custom health indicators


PHASE 3 - Advanced

• Using @profile annotation
• Configuring environment-specific beans
• Switching profiles for different environments
• Setting up a spring cloud project
• Key components of spring cloud
• Setting up eureka server
• Registering microservices with eureka
• Service discovery in action
• Introduction to api gateway
• Setting up spring cloud gateway
• Configuring routes and filters
• Setting up spring cloud config server
• Managing configuration in a centralized repository
• Configuring spring boot applications to use config server


PHASE 4 - Microservices

• Introduction to inter-service communication
• Using resttemplate for synchronous communication
• Using feign client for simplified service calls
• Setting up resilience4j
• Configuring circuit breakers, retry in microservices
• Introduction to distributed tracing
• Setting up spring cloud sleuth
• Visualizing traces with zipkin
• Introduction to spring cloud bus
• Integrating with a message broker (rabbitmq, kafka)
• Broadcasting configuration changes across services
• Introduction to event-driven architecture
• Setting up spring cloud stream

This roadmap guide you through the essential skills and concepts.

Spring Boot from Basics to Advanced (All Videos are in English)
https://lnkd.in/gz2A5ih2


Date:12/11/2024
git --version,git config -global user.name & user.email;
git init,git status,git add or add . or add -all,git commit -m "message"
git remote,git remote -v,git remote remove,git remote -a,git remote add origin ,git remote set -url origin,
git pull ,git pull origin branch name;git pull origin branch --force.
git clone,git pull ,git pull origin branch,git pull origin branch ,git pull origin branch -allow-unrelated-history,pull is a comnination of fetch and merge
git branch ,git branch -a,git branch -d,git checkout,git checkout -b,git switch,git merge,git cherry-pick "commit_id"
git log ,git log stat,git log -oneline,git reset --hard,git revert,git rebase,git restore ,git reset,git fetch origin

Linux Commands:ls,cd,mkdir,rmdir,rm,cp,cat,touch,ip,locate,whoami,pwd,pip,echo,clear,date,cal,grep,

Restful services for APi 
REST means representation of state transfer introduced in 2000 by fielding i.e.., CRUD operation get,put,post,delete{get - read,post-create,put - update,delete -delete}In springboot u will use in the rest controller .

HTTPS methods are the "GET,POST,Delete,PUT"


Date :11/12/2024
git --version
git config --global user.name & user.email,git init,git status ,git add . or -all , git commit -m
git remote ,git remote -a, git remote -v, git remote add origin ,git remote remove ,git remote set -url origin 
git push ,git push origin branch name,git push origin brnach name --force
git clone git fetch origin,git pull ,git pull origin branch name , -allow-unrelated--histories 
git branch ,git  branch -a ,git branch -d,git merge ,git cherry -pick commit_id,git checkout,git checkout -b ,git switch
git revert --hard,git revert,git reset ,git restore ,git rebase,git log stat,git log ,git log --oneline,git diff,git show commit_id
Linux commands:ls,cd,mkdir,rmdir,touch,cp,cat,echo,pwd,pip,locate,clear,cal,date,grep,ip,whoami

REstful web service (CRUD operation) get,put,post,delete - stateless and archeitural level  the request in the form of CRUD return client will get the data either in the form of JSON or XML Format   restful services are the  HTTPS method get post put delete  and it was specific  error lable 200ok 400not found 404 resource not found.

Date 16/12/2024
git --version,git config --global user.email&user.name,git init,git status,git add,add .,add --all,git commit -m
git remote -v,git remote,git remote -a,git remote add origin,git remote set -url,
git push ,git push origin branch name,git push origin branch name ,git push origin branch name --force -it will overide the files 
git clone,git pull ,git pull origin branch name,git pull origin branch name -allow-unrelated--histories,git fetch origin,git merge
git branch ,git branch -a,git branch -d,git switch,git checkout ,git checkout -b
git reset,git revert,git restore,git diff,git log ,git log --oneline,git log -stat,git  cherry -pick "commit id",git rebase,git show commit_id,git revert --hard

Linux commands:ls,cd,mkdir,rmdir,cp,mv,clear,cal,date,touch,echo,pwd,whoami,locate,ip,pip,cat,grep.

REST ful web services:get,delete,put,post
Date : 17/12/2024
 Microservice  
 Controller,service,model,database,hibernate ,In Controller -Response Entity will be there.
git --version,git config --global user.name & user.email ,git init,git status,git add or add . or add -all,git commit -m
git remote,git remote -v,git remote add origin ,git remote set -url,git remote remove,git pull,git pull origin  branch name 
,git pull origin branch name --force ,git clone, git pull ,git pull  origin branch name ,pull is a combination of merge and fetch 
git fetch origin , git branch ,git branch -d to delete the branch ,git switch , git checkout ,git checkout -b,git diff,git log -stat,git cherry-pick "commit_id".git show commit_id,git log .git log -oneline,git restore ,git revert ,git reset,git reset --hard,git merge,git rebase,git 
Linux commands :ls ,cd ,grep,whoami,locate,mkdir,rmdir,touch,echo,rm,cat,cp,date,clear,cal,pip,pwd


Date :12/19/2024
git --version,git init,git config -global user.name & user.email,git status ,git add ,add . ,add -all,git commit -m,
git remote ,git remote add origin ,git remote set -url origin ,git push,git push origin branch name ,git push origin --force
git clone,git pull ,git pull origin branch name --allow-unrelated--histories , git fetch,git branch.git branch name ,git switch ,git branch -d,git checkout ,git checkout -b,git merge ,git cherry-pick "commit id"
git reset,git reset --hard,git revert,git restore ,git log ,git log stat,git log --oneline,git diff,git remote remove
linux commands:
ls,rm.cd,copy,rmdir,mkdir,touch,pwd,locate,pip,grep,whoami,date,cal,clear

Time complexityO(1), O(n),O(log N),O(n2),o(n logn),o(2n),o(n!)
in system computations are - 10^8 time limit exceeded.
O(1),O(log N),O(N),O(N log N),O(N^2),O(n^3),O(2n),O(n!)

date 21/12/2024
git --version,git init,git config -global user.name & user.email ,git status ,git add or add .or add -all, git commit -m""
git remote ,git remote -v,git remote remove,git remote set-url origin ,git remote add origin 
git push ,git push origin branch name,git push origin branch name --force
git clone ,git pull,git pull origin branch name ,git pull origin branch name -allow-unrelated-histories,git fetch origin ,git merge,
git branch ,git branch -a,git branch -d,git switch, git checkout,git checkout -b
git reset,git reset --hard,git revert,git restore,git diff ,git log ,git log stat,git log -oneline,git cherry -pick"commit_id",git rebase
linux commands:
cd,mkdir,rmdir,ls,rm,cp,rm,touch,pwd,pip,grep,whoami,locate,date,cal,clear,cat,echo

time complexity:
it will calculate the total no of computation of cpu it means no of cycles 10^8   Unit of time
three types  big O omega ,theta in worst case we will go with the Big O

O(1).O(log N),O(N).O(N lOG N),O(n^2),O(2n),O(n!)

Linear Data structures:Array-completed
                 LinkedList -SL,DL,CL
                Single Linked list completed from scratch.
                Doubly Linked list -pending
Data Structures -  Singly linked list
class SingleListsd
9:57 PM 12/21/2024`2
{
Node head;
class Node
{
int data;Node next;
public Node (int d){ data = d;next = null}}
public void createSingliList(int d)
{
Node newNode = new Node(d);
if(head == null)
{
head = newNode;
}
else
{
Node tail = head;
while(tail.next != null)
{
tail = tail.next;
}
tail.next = newNode;
}

another logic for singly linked list
we're adding the 
Node tail;
if(head == null)
{
head = tail = newNode;
}
else{
tail.next = newNode;
tail = newNode;
}

8:40 AM 12/22/2024
git --version,git init,git status,git add or add . or add -all,git commit -m"",git config -global user.name & user.email,
git remote ,git remote -v,git remote remove,git remote add origin ,git remote set -URL,
git push ,git push origin branch name ,git push origin branch name --force
git clone,git pull origin branch name ,git pull ,git  pull origin branch -allow-unrelated-histories
git fetch origin,git merge branch naem , git branch,git branch -a,git brnach -d,git switch,git checkout,git checkout -b
git reset,git reset -hard,git restore,git revert,git rebase,git diff,git log ,git log stat,git log -oneline,
git cherry -pick"commit id"

Linux commands :cd,mkdir,rmdir,touch ,cat,rm,cp,echo,pip,whoami,ls,clear,locate,pwd,grep,pip,cal,date
time Complexity:
O(1),O(log N),O(N),O(N log N),O(N^2),O(N^3),O(2N),O(n!);

LineaR DATA STRUCTURES: 
Array - compelted from scratch.
Linkedlist - completed(singly linked list,Double linked  list)
Stack  data structures - pending  

8:40 AM 12/24/2024


git --version,git init,git config -global user.name & user.email ,git status ,git add or add . or add -all ,git commit -m
git remote,git remote -v,git remote add origin,git remote set -url,git remote remove,git remote -a
git push ,git push origin branch name ,git  push origin branch name --force
git clone ,git pull origin branch name ,git pull origin branch -allow-unrelated-histories 
git fetch origin,git merge,git branch ,git branch -d,git branch ,git switch,git checkout,git checkouyt -b,git diff,git reset
git revert ,git restore,git revert --hard,git cherry -pick"commit_id",git rebase,git log ,git log stat,git log -oneline

Linux Commands:
ls,cd,mkdir,rmdir,touch,copy,cp,rm,cat,echo,pip,whoami,grep,pwd,cal,clear,date,

Time Complextiy:Total No pof computations taken by the cppu -max -10^8,
time complexity is calculated by the unif of time 
BIg O ,Omege,theta,in worst case we will go with the Big O
O(1),O(log N),O(N),O(N log N),O(N^2),O(2N),O(n!)

 How to create the pull request 
steps from starting onwords
1.clone the repository in u r local machine 
2.create the new branch 
3.make changes and add the files 
4.commit it , push it,
5,go to the github and u will see the compare and pull request button press on it ,
give title and description what changes u made it and wt files or any ohter things added 
6.After that press on the pull request 

8:41 AM 12/26/2024
git --version,git init,git config -global user.name& user.email,git status,git add or add. or add -all ,git commit -m
git remote,git remote -v,git remote -a, git remote add origin ,git remote set -url,git remote remove
git push,git push origin branch name ,git push --upstream origin branch name ,git push origin branch name  --force
git clone,git merge branch name,git fetch origin,git pull ,git pull origin branch name ,git pull origin branch name -allow-unrelated-histories
git reset,git reset --hard,git restore, git revert,git log,git log -oneline,git log -stat,git diff,git cherry -pick"commit_id",
git branch ,git branch -d;git switch ,git checkout -b,git checkout ;

Git PR reequest right 
1.clone the project i mean master branch 
2.create the new branch,
3.make changes to the code or add the files 
4.push branch into the same address after commit only.
5.go to the github and u will see the compare & pull request press onit and give description what change made and other files or other  things added into it
6.after that press on the pull request

Linux commands :cd,ls,mkdir,rmdir,touch,cp,mv,cat,grep,pwd,echo,whoami,pip,clear,cal,date,locate
Time Complexity:O(1),O(log N),O(N),O(N log N),O(N^2),O(N^3),O(2n),O(!N)
Big O ,theta,omega

Data Structures:
Arrays,linkedlist,stacks -fixed size completed,dynamic size pending:need to complete today
Stack data structure is linear 
it has the certain principle to create a stack datastructure
1.push
2.pop
3.peek
4.isEmpty
Stack data structure follow the LIFO principles (LIFO means Last In First Out)
it can be created by the two ways 1.fixed size  2.Dynamic  size

Stack data structure creation:

Arrays we can use both fixed and dynamic 
Singly Linked List is for dynamic 

10:09 AM 12/27/2024
git --version,git init,git config -global user.name & user.email,git status ,git add or add. or add -all ,git commit -m
git remote ,git remote -v,git remote add origin ,git remote set -url origin,git remote remove
git push,git push -u origin branch name ,git push origin branch name,git push origin branch name --force
git clone ,git pull ,git pull origin branch name ,git pull origin branch name allow--unrelated-histories.git fetch origin ,git merge
git branch,git branch -a,git branch -d,git switch,git checkout,git checkout -b,
git reset,git reset --hard,git revert,git restore,git rebase,git log -stat,git log -oneline,git log ,git diff,git cherry -pick"commit_id"

Linux commands:cd,mkdir,rmdir,grep,touch,rm,cp,cat,pwd,locate,whoami,clear,cal,date,ls,pip,echo
Time complexity : O(1),O(log n),O(n),O(n log n),O(n ^ 2),O(n^3),O(2n),O(n!),

Data Structures:
Arrays ,Linkedlist - singly Linked list,Doubly linked list, Stack -fixed size& dynamic size -completed
Queue - pending today need to complete



10:11 AM 12/30/2024
git --version ,git init,git config --global user.name & user.email,git status,git add or add . or git add -all,git commit -m
git remote ,git remote -v,git remote add origin,git remote set -url origin,git remote remove.
git branch,git branch -d,git branch -a,git switch,git checkout,git checkout -b
git push ,git push origin branch name,git -u push origin branch name ,git push origin branch name --force
git clone ,git pull ,git pull origin branch name,git pull origin branch name -allow-unrelated-histories,git fetch origin .git merge
git reset,git rebase,git reset --hard,git revert,git restore,git diff,git log stat,git log ,git log -oneline,git cherry -pick "commit id"

Linux Commands:ls,cd,mkdir,rmdir,rm,touch,cp,cat,pwd,locate,whoami,clear,cal,date,ls,pip,echo
TimeComplexity : O(1),O(log N),O(N),O(N log N),O(n^2),O(N^3),O(2N),O(N!).
Big O worst case,theta,omega


Data Structures :Array ,Linkedlist,Stack -pop,push,top-peek,isFull,isEmpty -completed
Queue is pending;
                
how to raise the PR request:
PR request means PULL REQUEST When we are a developers need to change some code or some file in the repository first we will clone into it 
after wards create a new branch and after the all requirements changing push into the same repository go to the Github and it will be green button pull & compare request button press on it and give the name and description breifly afterwards raise the press on create pull request.

Restful webservices - get ,put,post,delete
 (CRUD opertions);
11:03 PM 12/30/2024
Queue is a Linear Data structures  and it has the normal queue & circular queue 
from scratch it can be crearted using the array ,linkedlist and stack,
most efficient way to me is the Using Linkedlist easily can create the Queue,Queue - Enqueue,Dequeue,peek(top element) and queue follows the FIFO principle
FIFO means first in first out
circular queue using array one logic to remember-"rear = (rear+1)%size :Here size means the array length for front also "front = (front+1)%size;



 



