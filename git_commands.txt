Github command -revison
Git config --global username “”//git config --global user.name"user name"
                                git config --global user.email"email ID"


//
Git config --global  email””
Git init
Git status
Git add
Git add –all
Git commit -m
Git restore 
Git branch name
Git checkout branch name
Git checkout -b branch name 
Git remote set-url origin
Git remote target
Git remote -a
Git remote -v
git pull
git push origin branch name 
cd,mv,rm
$ git remote add origin https://github.com/ymjfakruddin/Learning_git.git
mkdir
git help command
git help –all
git commad name  -help
Hello World
git pull origin master
git pull
git push origin master
git log
git log --oneline
Date : 11/19/2024
git remote add origin 
git init
And HTTPS link will add the remote repository to connect with local repository with a secure network and this will copy from Github & paste in the git bash here with command git remote add origin and paste the link .
Date :11/20/2024
We have ssh  it means used for unsecured network this protocol is used in git
git config --global user.email " "
git config --global user.name " "
git init 
git status 
git add -all
git commit -m
git restore 
git remote add origin
git remote set_URL 
git checkout
git branch
git branch name
git push origin branch name
git pull 
git log
git log -oneline
git revert 
git fetch origin 

git unrelated histories
occurs when you attempt to merge two Git repositories that have completely separate commit histories. This typically happens if the local repository and the remote repository were initialized independently (e.g., both were created with git init but were not connected initially).

How to Fix This
You can force Git to merge the unrelated histories using the --allow-unrelated-histories flag. Here's how to do it:

bash
Copy code
git pull origin master --allow-unrelated-histories
This will combine the two histories, resolving the issue. After running this command, Git will attempt to merge the histories, and you may need to resolve any conflicts if they exist..

git push origin master force 
git push prigin   master --allow-unrelated-histories
date 11/21/2024
git config -global user.email""
git config =global user.name
git init
git status
git add --all
git commit -m" "
git branch
git branch branch name
git checkout branch name
git checkout -b newbranch name
git remote add origin "link of https"
git remote set URL
git push origin branch name
git clone link
git pull origin branch name
git log 
git fetch origin 
git log -oneline
git pull
git push origin master force 
it will override the files in GitHub
git pull origin master -allow-unrelated-histories  //it is used to merge  unrelated histories becoz same repostiories working by two people
date:11/22/2024
git config -global user.email""
git config -global user.name""
git init
git status 
git add --all
git commit -m"message"
git branch /name
git checkout /branch name 
git checkout -b
git remote add origin 
git remote  set-url
git remote -a
git remote -v 
git fetech origin 
git log
git log -oneline
git fetch origin 
git push origin branch name
git push 
git clone s
git pull 
git pull origin master
git merge branch name
git pull origin master -allow-unrelated-histories
git push origin master force
ls 
mkdir
cd
rmdir
touch 
grep 
date :11/24/2024
git comfig --global user.name
git config --global user.email
git init
git status 
git add . or add file name or add --all
git commit -m
git remote add origin 
git remote  set -url 
git remote -v
git remote -a
git remote
git push -u origin branch name
git push 
git clone
git pull origin master
git pull origin master allow-unrelated -histories
git push origin master --force
git fetch origin 
git push -u origin master
-u set upstream
git pull 
git branch 
git checkout 
git switch 
git checkout -b
git switch origin master
git log
git log --oneline
git DIFF
head will point current branch which we are working currently
git merge
to delete branch in git  
git branch -d branch name

undo commands
git reset  --head
git restore 
git revert 
it has http and ssh links of it 
Date:  25/11/2024
git config --global user.name
git config --global user.email
git init
git status
git add --all or .
git commit -m"message "
git branch
git checkout -b 
git checkout branch name
git switch 
git branch -d branch name // it is to delete the branch
git remote add origin 
git remote set --url origin 
git push -u origin master
git push origin master(you can give u r own branch name)
git push origin master --force (be careful using this command)
git remote -v
git remote remove 
git pull origin master
git clone
git pull origin master --allow-unrelated--histories
git pull
git reset
git restore
git revoke
git fetch origin
git log 
git log --oneline
cd 
ls
cd ..
mkdir rmdir touch grep 
git  merge 
git diff
ls -1
ls -L



 
 




